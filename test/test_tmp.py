"""
test.py

===============================================================================

Last Modified: 26 May 2020
Modification By: Jinhu Qi

Creation Date: 15 May 2020
Initial Author: Bryan Carl

===============================================================================

This module contains all the unit and integration tests for the system. Because
of this, it interfaces with every single module.
"""

# Standard Imports
import time
import unittest
from unittest import mock

# Third Party Packages
import requests

# Local Modules

from data.busy_times.reporter import BusyTimesReporter
from data.busy_times.manager import SimulationManager
from server.api import app, PORT, ENV, HOST
from data.bestTime import bestTime
from data.bestPlace import bestPlace
from flask_restful import request

class BestTimeTests(unittest.TestCase):

    def test_get_best_time_1(self):
        print()
        print("=" * 80)
        print("Testing the functionality of BestTime API")
        print("Testing  get best time function")
        bt = bestTime()
        locations = ["ChIJa147K9HX3IAR-lwiGIQv9i4"]
        days = ("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
        print("For bestTime, \n")
        #expected_result = {'Monday': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 39, 53, 46, 31, 27, 38, 55, 61, 50, 29, 12, 0, 0],
        #                   'Tuesday': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 28, 43, 40, 29, 31, 48, 68, 70, 55, 33, 17, 0, 0],
        #                   'Wednesday': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 18, 32, 35, 27, 21, 31, 51, 57, 40, 18, 5, 0, 0],
        #                  'Thursday': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 28, 50, 44, 30, 33, 50, 64, 65, 52, 32, 16, 0, 0],
        #                   'Friday': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 21, 28, 29, 25, 32, 67, 100, 83, 48, 35, 24, 10, 0],
        #                   'Saturday': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 16, 42, 57, 40, 27, 33, 48, 59, 57, 44, 28, 14, 0],
        #                   'Sunday': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 31, 37, 42, 52, 66, 78, 73, 57, 50, 46, 31, 0, 0]}

        expected_result = [(6, 4), (7, 15), (20, 19), (8, 26), (19, 34), (9, 38), (18, 63), (10, 71), (17, 72), (16, 80), (11, 85), (15, 89), (12, 91), (13, 92), (14, 92), (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (21, 0), (22, 0), (23, 0)]
        for location in locations:
            for day in days:
                print("Checking for location:", location, ", days:", day)
                result = bt.get_best_time(location, day)
                print("expected result: ", expected_result)
                print("real result: ", result)
                self.assertEqual(result, expected_result)

class BestPlaceTests(unittest.TestCase):

    def test_get_best_place_1(self):
        print()
        print("=" * 80)
        print("Testing the functionality of BestPlace API")
        print("Testing  get best place function")
        bp = bestPlace()
        locations = ["ChIJs2Lkp0Xc3IARt2AnTeAM9Jk",
                     "ChIJHZ2y2vfn3IARApEK9qYdNGQ",
                     "ChIJIUcczmDe3IARzC_90ctUBW8",
                     "ChIJHRL3_Zze3IAR0KMmrDzh2tM",
                     "ChIJRQHY3Bzd3IARkZI4FfXygg0"]

        days = ("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")

        print("For bestPlace, \n")
        #expected_result = {'Monday': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 39, 53, 46, 31, 27, 38, 55, 61, 50, 29, 12, 0, 0],
        #                   'Tuesday': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 28, 43, 40, 29, 31, 48, 68, 70, 55, 33, 17, 0, 0],
        #                   'Wednesday': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 18, 32, 35, 27, 21, 31, 51, 57, 40, 18, 5, 0, 0],
        #                  'Thursday': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 28, 50, 44, 30, 33, 50, 64, 65, 52, 32, 16, 0, 0],
        #                   'Friday': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 21, 28, 29, 25, 32, 67, 100, 83, 48, 35, 24, 10, 0],
        #                   'Saturday': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 16, 42, 57, 40, 27, 33, 48, 59, 57, 44, 28, 14, 0],
        #                   'Sunday': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 31, 37, 42, 52, 66, 78, 73, 57, 50, 46, 31, 0, 0]}

        #expected_results = [{'Monday': [0, 0, 0, 0, 0, 0, 7, 21, 50, 78, 100, 92, 85, 71, 50, 28, 0, 0, 0, 0, 0, 0, 0, 0], 'Tuesday': [0, 0, 0, 0, 0, 0, 14, 21, 28, 35, 42, 50, 42, 42, 28, 21, 0, 0, 0, 0, 0, 0, 0, 0], 'Wednesday': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'Thursday': [0, 0, 0, 0, 0, 0, 7, 28, 71, 85, 42, 21, 57, 64, 14, 7, 0, 0, 0, 0, 0, 0, 0, 0], 'Friday': [0, 0, 0, 0, 0, 0, 7, 28, 78, 100, 57, 42, 71, 92, 78, 50, 0, 0, 0, 0, 0, 0, 0, 0], 'Saturday': [0, 0, 0, 0, 0, 0, 0, 14, 28, 42, 64, 78, 85, 71, 57, 42, 0, 0, 0, 0, 0, 0, 0, 0], 'Sunday': [0, 0, 0, 0, 0, 0, 0, 0, 50, 71, 64, 42, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]},
        #                    {'Monday': [0, 0, 0, 0, 0, 0, 0, 14, 28, 36, 38, 36, 34, 28, 16, 6, 0, 0, 0, 0, 0, 0, 0, 0], 'Tuesday': [0, 0, 0, 0, 0, 0, 0, 20, 40, 46, 44, 48, 40, 22, 10, 6, 0, 0, 0, 0, 0, 0, 0, 0], 'Wednesday': [0, 0, 0, 0, 0, 0, 0, 10, 18, 26, 32, 34, 30, 24, 16, 10, 0, 0, 0, 0, 0, 0, 0, 0], 'Thursday': [0, 0, 0, 0, 0, 0, 0, 24, 36, 44, 58, 54, 36, 22, 16, 10, 0, 0, 0, 0, 0, 0, 0, 0], 'Friday': [0, 0, 0, 0, 0, 0, 0, 32, 64, 70, 52, 40, 36, 32, 24, 16, 0, 0, 0, 0, 0, 0, 0, 0], 'Saturday': [0, 0, 0, 0, 0, 0, 0, 0, 38, 64, 76, 68, 52, 40, 32, 26, 0, 0, 0, 0, 0, 0, 0, 0], 'Sunday': [0, 0, 0, 0, 0, 0, 0, 0, 58, 100, 78, 54, 54, 52, 42, 26, 0, 0, 0, 0, 0, 0, 0, 0]},
        #                    {'Monday': [0, 0, 0, 0, 0, 0, 7, 22, 34, 34, 30, 37, 47, 51, 46, 35, 24, 23, 34, 50, 50, 0, 0, 0], 'Tuesday': [0, 0, 0, 0, 0, 0, 6, 15, 25, 27, 28, 38, 50, 47, 34, 26, 30, 38, 43, 40, 30, 0, 0, 0], 'Wednesday': [0, 0, 0, 0, 0, 0, 2, 16, 34, 26, 27, 41, 52, 53, 46, 34, 26, 28, 34, 38, 36, 0, 0, 0], 'Thursday': [0, 0, 0, 0, 0, 0, 6, 30, 49, 36, 35, 57, 75, 73, 54, 33, 22, 23, 31, 37, 37, 0, 0, 0], 'Friday': [0, 0, 0, 0, 0, 0, 27, 53, 52, 33, 38, 73, 100, 90, 56, 34, 35, 50, 66, 71, 63, 0, 0, 0], 'Saturday': [0, 0, 0, 0, 0, 0, 9, 39, 74, 71, 52, 55, 69, 79, 77, 66, 53, 46, 47, 52, 53, 0, 0, 0], 'Sunday': [0, 0, 0, 0, 0, 0, 0, 7, 22, 46, 75, 96, 97, 84, 71, 62, 58, 60, 66, 69, 58, 0, 0, 0]},
        #                    {'Monday': [0, 0, 0, 0, 0, 0, 0, 0, 21, 36, 52, 52, 47, 31, 21, 15, 26, 31, 36, 31, 21, 0, 0, 0], 'Tuesday': [0, 0, 0, 0, 0, 0, 0, 15, 26, 42, 47, 42, 26, 21, 21, 26, 36, 36, 31, 21, 10, 0, 0, 0], 'Wednesday': [0, 0, 0, 0, 0, 0, 0, 0, 15, 36, 36, 31, 36, 36, 26, 21, 21, 26, 26, 21, 10, 0, 0, 0], 'Thursday': [0, 0, 0, 0, 0, 0, 0, 10, 15, 21, 26, 31, 36, 36, 36, 36, 31, 26, 21, 15, 10, 0, 0, 0], 'Friday': [0, 0, 0, 0, 0, 0, 0, 15, 21, 31, 36, 42, 42, 36, 31, 31, 31, 36, 42, 47, 36, 26, 15, 0], 'Saturday': [0, 0, 0, 0, 0, 0, 0, 0, 26, 57, 84, 100, 100, 89, 84, 78, 63, 47, 31, 21, 26, 42, 36, 0], 'Sunday': [0, 0, 0, 0, 0, 0, 0, 0, 31, 47, 57, 63, 57, 57, 52, 42, 42, 47, 42, 31, 15, 0, 0, 0]},
        #                    {'Monday': [0, 0, 0, 0, 0, 0, 0, 38, 65, 73, 65, 57, 61, 69, 65, 57, 53, 53, 46, 26, 11, 0, 0, 0], 'Tuesday': [0, 0, 0, 0, 0, 0, 0, 19, 34, 34, 30, 46, 65, 61, 38, 26, 46, 80, 80, 46, 11, 0, 0, 0], 'Wednesday': [0, 0, 0, 0, 0, 0, 0, 38, 50, 42, 38, 50, 57, 57, 46, 42, 46, 57, 65, 57, 38, 0, 0, 0], 'Thursday': [0, 0, 0, 0, 0, 0, 0, 50, 80, 84, 88, 100, 96, 76, 73, 80, 88, 84, 76, 61, 42, 0, 0, 0], 'Friday': [0, 0, 0, 0, 0, 0, 0, 11, 26, 50, 69, 73, 65, 50, 46, 57, 76, 88, 80, 61, 38, 0, 0, 0], 'Saturday': [0, 0, 0, 0, 0, 0, 0, 11, 46, 88, 88, 76, 88, 100, 92, 76, 61, 53, 42, 34, 23, 0, 0, 0], 'Sunday': [0, 0, 0, 0, 0, 0, 0, 0, 26, 46, 69, 80, 80, 69, 46, 26, 23, 57, 30, 42, 57, 0, 0, 0]}
        #                    ]
        expected_results = {'ChIJs2Lkp0Xc3IARt2AnTeAM9Jk': [(15, 15), (8, 21), (14, 21), (20, 21), (16, 26), (13, 31), (17, 31), (19, 31), (9, 36), (18, 36), (12, 47), (10, 52), (11, 52), (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (21, 0), (22, 0), (23, 0)],
                            'ChIJHZ2y2vfn3IARApEK9qYdNGQ': [(20, 11), (19, 26), (7, 38), (18, 46), (16, 53), (17, 53), (11, 57), (15, 57), (12, 61), (8, 65), (10, 65), (14, 65), (13, 69), (9, 73), (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (21, 0), (22, 0), (23, 0)],
                            'ChIJIUcczmDe3IARzC_90ctUBW8': [(15, 6), (7, 14), (14, 16), (8, 28), (13, 28), (12, 34), (9, 36), (11, 36), (10, 38), (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0)],
                            'ChIJHRL3_Zze3IAR0KMmrDzh2tM': [(6, 7), (7, 22), (17, 23), (16, 24), (10, 30), (8, 34), (9, 34), (18, 34), (15, 35), (11, 37), (14, 46), (12, 47), (19, 50), (20, 50), (13, 51), (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (21, 0), (22, 0), (23, 0)],
                            'ChIJRQHY3Bzd3IARkZI4FfXygg0': [(10, 14), (7, 17), (9, 17), (11, 21), (8, 25), (19, 25), (12, 27), (18, 31), (20, 31), (13, 34), (17, 38), (14, 40), (15, 42), (16, 42), (22, 42), (21, 57), (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (23, 0)]}, \
                           {'ChIJs2Lkp0Xc3IARt2AnTeAM9Jk': [(20, 10), (7, 15), (13, 21), (14, 21), (19, 21), (8, 26), (12, 26), (15, 26), (18, 31), (16, 36), (17, 36), (9, 42), (11, 42), (10, 47), (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (21, 0), (22, 0), (23, 0)],
                            'ChIJHZ2y2vfn3IARApEK9qYdNGQ': [(20, 11), (7, 19), (15, 26), (10, 30), (8, 34), (9, 34), (14, 38), (11, 46), (16, 46), (19, 46), (13, 61), (12, 65), (17, 80), (18, 80), (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (21, 0), (22, 0), (23, 0)],
                            'ChIJIUcczmDe3IARzC_90ctUBW8': [(15, 6), (14, 10), (7, 20), (13, 22), (8, 40), (12, 40), (10, 44), (9, 46), (11, 48), (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0)],
                            'ChIJHRL3_Zze3IAR0KMmrDzh2tM': [(6, 6), (7, 15), (8, 25), (15, 26), (9, 27), (10, 28), (16, 30), (20, 30), (14, 34), (11, 38), (17, 38), (19, 40), (18, 43), (13, 47), (12, 50), (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (21, 0), (22, 0), (23, 0)],
                            'ChIJRQHY3Bzd3IARkZI4FfXygg0': [(7, 6), (8, 12), (20, 19), (9, 21), (10, 29), (14, 29), (19, 31), (13, 34), (15, 34), (22, 34), (11, 36), (21, 36), (12, 38), (16, 51), (18, 55), (17, 63), (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (23, 0)]}, \
                           {'ChIJs2Lkp0Xc3IARt2AnTeAM9Jk': [(20, 10), (8, 15), (15, 21), (16, 21), (19, 21), (14, 26), (17, 26), (18, 26), (11, 31), (9, 36), (10, 36), (12, 36), (13, 36), (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (21, 0), (22, 0), (23, 0)],
                            'ChIJHZ2y2vfn3IARApEK9qYdNGQ': [(7, 38), (10, 38), (20, 38), (9, 42), (15, 42), (14, 46), (16, 46), (8, 50), (11, 50), (12, 57), (13, 57), (17, 57), (19, 57), (18, 65), (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (21, 0), (22, 0), (23, 0)],
                            'ChIJIUcczmDe3IARzC_90ctUBW8': [(7, 10), (15, 10), (14, 16), (8, 18), (13, 24), (9, 26), (12, 30), (10, 32), (11, 34), (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0)],
                            'ChIJHRL3_Zze3IAR0KMmrDzh2tM': [(6, 2), (7, 16), (9, 26), (16, 26), (10, 27), (17, 28), (8, 34), (15, 34), (18, 34), (20, 36), (19, 38), (11, 41), (14, 46), (12, 52), (13, 53), (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (21, 0), (22, 0), (23, 0)],
                            'ChIJRQHY3Bzd3IARkZI4FfXygg0': [(7, 8), (8, 12), (9, 21), (10, 29), (22, 29), (11, 36), (12, 42), (19, 42), (13, 44), (14, 44), (15, 46), (16, 51), (18, 53), (17, 57), (20, 57), (21, 85), (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (23, 0)]}, \
                           {'ChIJs2Lkp0Xc3IARt2AnTeAM9Jk': [(7, 10), (20, 10), (8, 15), (19, 15), (9, 21), (18, 21), (10, 26), (17, 26), (11, 31), (16, 31), (12, 36), (13, 36), (14, 36), (15, 36), (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (21, 0), (22, 0), (23, 0)],
                            'ChIJHZ2y2vfn3IARApEK9qYdNGQ': [(20, 42), (7, 50), (19, 61), (14, 73), (13, 76), (18, 76), (8, 80), (15, 80), (9, 84), (17, 84), (10, 88), (16, 88), (12, 96), (11, 100), (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (21, 0), (22, 0), (23, 0)],
                            'ChIJIUcczmDe3IARzC_90ctUBW8': [(15, 10), (14, 16), (13, 22), (7, 24), (8, 36), (12, 36), (9, 44), (11, 54), (10, 58), (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0)],
                            'ChIJHRL3_Zze3IAR0KMmrDzh2tM': [(6, 6), (16, 22), (17, 23), (7, 30), (18, 31), (15, 33), (10, 35), (9, 36), (19, 37), (20, 37), (8, 49), (14, 54), (11, 57), (13, 73), (12, 75), (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (21, 0), (22, 0), (23, 0)],
                            'ChIJRQHY3Bzd3IARkZI4FfXygg0': [(7, 14), (8, 19), (9, 23), (10, 27), (19, 27), (11, 29), (12, 31), (20, 34), (13, 40), (18, 42), (14, 51), (22, 53), (17, 55), (15, 59), (16, 61), (21, 78), (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (23, 0)]}, \
                           {'ChIJs2Lkp0Xc3IARt2AnTeAM9Jk': [(7, 15), (22, 15), (8, 21), (21, 26), (9, 31), (14, 31), (15, 31), (16, 31), (10, 36), (13, 36), (17, 36), (20, 36), (11, 42), (12, 42), (18, 42), (19, 47), (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (23, 0)],
                            'ChIJHZ2y2vfn3IARApEK9qYdNGQ': [(7, 11), (8, 26), (20, 38), (14, 46), (9, 50), (13, 50), (15, 57), (19, 61), (12, 65), (10, 69), (11, 73), (16, 76), (18, 80), (17, 88), (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (21, 0), (22, 0), (23, 0)],
                            'ChIJIUcczmDe3IARzC_90ctUBW8': [(15, 16), (14, 24), (7, 32), (13, 32), (12, 36), (11, 40), (10, 52), (8, 64), (9, 70), (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0)],
                            'ChIJHRL3_Zze3IAR0KMmrDzh2tM': [(6, 27), (9, 33), (15, 34), (16, 35), (10, 38), (17, 50), (8, 52), (7, 53), (14, 56), (20, 63), (18, 66), (19, 71), (11, 73), (13, 90), (12, 100), (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (21, 0), (22, 0), (23, 0)],
                            'ChIJRQHY3Bzd3IARkZI4FfXygg0': [(7, 14), (9, 17), (10, 23), (11, 36), (22, 38), (19, 48), (12, 53), (18, 55), (20, 57), (21, 59), (8, 61), (13, 70), (17, 70), (14, 82), (16, 82), (15, 87), (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (23, 0)]}, \
                           {'ChIJs2Lkp0Xc3IARt2AnTeAM9Jk': [(19, 21), (8, 26), (20, 26), (18, 31), (22, 36), (21, 42), (17, 47), (9, 57), (16, 63), (15, 78), (10, 84), (14, 84), (13, 89), (11, 100), (12, 100), (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (23, 0)],
                            'ChIJHZ2y2vfn3IARApEK9qYdNGQ': [(7, 11), (20, 23), (19, 34), (18, 42), (8, 46), (17, 53), (16, 61), (11, 76), (15, 76), (9, 88), (10, 88), (12, 88), (14, 92), (13, 100), (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (21, 0), (22, 0), (23, 0)],
                            'ChIJIUcczmDe3IARzC_90ctUBW8': [(15, 26), (14, 32), (8, 38), (13, 40), (12, 52), (9, 64), (11, 68), (10, 76), (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0)],
                            'ChIJHRL3_Zze3IAR0KMmrDzh2tM': [(6, 9), (7, 39), (17, 46), (18, 47), (10, 52), (19, 52), (16, 53), (20, 53), (11, 55), (15, 66), (12, 69), (9, 71), (8, 74), (14, 77), (13, 79), (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (21, 0), (22, 0), (23, 0)],
                            'ChIJRQHY3Bzd3IARkZI4FfXygg0': [(8, 19), (10, 31), (11, 31), (19, 44), (18, 48), (12, 51), (9, 53), (22, 63), (20, 65), (17, 68), (13, 72), (21, 85), (16, 87), (14, 89), (15, 93), (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (23, 0)]}, \
                           {'ChIJs2Lkp0Xc3IARt2AnTeAM9Jk': [(20, 15), (8, 31), (19, 31), (15, 42), (16, 42), (18, 42), (9, 47), (17, 47), (14, 52), (10, 57), (12, 57), (13, 57), (11, 63), (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (21, 0), (22, 0), (23, 0)],
                            'ChIJHZ2y2vfn3IARApEK9qYdNGQ': [(16, 23), (8, 26), (15, 26), (18, 30), (19, 42), (9, 46), (14, 46), (17, 57), (20, 57), (10, 69), (13, 69), (11, 80), (12, 80), (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (21, 0), (22, 0), (23, 0)],
                            'ChIJIUcczmDe3IARzC_90ctUBW8': [(15, 26), (14, 42), (13, 52), (11, 54), (12, 54), (8, 58), (10, 78), (9, 100), (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0)],
                            'ChIJHRL3_Zze3IAR0KMmrDzh2tM': [(7, 7), (8, 22), (9, 46), (16, 58), (20, 58), (17, 60), (15, 62), (18, 66), (19, 69), (14, 71), (10, 75), (13, 84), (11, 96), (12, 97), (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (21, 0), (22, 0), (23, 0)],
                            'ChIJRQHY3Bzd3IARkZI4FfXygg0': [(8, 8), (9, 17), (10, 29), (22, 31), (19, 42), (20, 44), (11, 46), (21, 53), (18, 59), (12, 65), (17, 76), (13, 85), (16, 91), (14, 95), (15, 100), (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (23, 0)]}
        result = []
        print("Checking for location:", locations)
        count = -1
        for day in days:
            print("Checking for the result of", day, "for all locations")
            real_result = bp.get_best_place(locations, day)
            count = count + 1
            print("expected result for", day, ":", expected_results[count])
            print("real result for", day, ":", real_result)
            self.assertEqual(expected_results[count], real_result)

if __name__ == '__main__':
    unittest.main()
